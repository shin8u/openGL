#include <iostream>
#include <glut.h>
#include <math.h>

using namespace std;


static float positionX = 0.f;
static float positionY = 0.f;
static float positionZ = 0.f;
static float rotationX = 0.f;
static float rotationY = 0.f;
static float rotationZ = 0.f;
static const float dPosition = 0.1f;
static const float dRotation = 5.f;
static float torusParam = 0.4;
static float torusStep = 0.1;
const double PI = 3.1415926535897932384626433832795;
const int X_COORD = 50;// X - размерность ] должны
const int Y_COORD = 50;// Y - размерность ] быть равными




void display();
void specialKeys(int key, int x, int y);
void drawAxis();
void handleSpecialKeys();
//GLuint loadDDS(const char * imagepath);
GLuint loadTexture(const char* filename);


int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Lab1");
    glLoadIdentity();
    glFrustum(-0.1, 0.1, -0.1, 0.1, 0.2, 1000);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    glutDisplayFunc(display);
    glutSpecialFunc(specialKeys);


    glutMainLoop();

    return 0;
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    //glScalef(0.5f, 0.5f, 0.5f);
    glOrtho(-2.0, 2.0, -2.0, 2.0, 2.0, -2.0);

    handleSpecialKeys();

    drawAxis();

    //    doTask2();
    glColor3f(0.3, 0.3, 0);
    glutSolidTorus(0.15, 0.5, 16, 32);

    //glutSolidCone(0.5, 1, 32, 32);
 
    glPushMatrix();
        float position[] = { 0,0,1,0 };
        glLightfv(GL_LIGHT0, GL_POSITION, position);
        glPopMatrix();
    glFlush();
    glutSwapBuffers();
}

void handleSpecialKeys()
{
    glRotatef(rotationX, 1.f, 0.f, 0.f);
    glRotatef(rotationY, 0.f, 1.f, 0.f);
    glRotatef(rotationZ, 0.f, 0.f, 1.f);
}

void specialKeys(int key, int x, int y)
{
    if (key == GLUT_KEY_RIGHT)
        rotationY -= dRotation;
    else if (key == GLUT_KEY_LEFT)
        rotationY += dRotation;
    else if (key == GLUT_KEY_UP)
        rotationX += dRotation;
    else if (key == GLUT_KEY_DOWN)
        rotationX -= dRotation;
    else if (key == GLUT_KEY_F1)
        rotationZ += dRotation;
    else if (key == GLUT_KEY_F2)
        rotationZ -= dRotation;
    else if (key == GLUT_KEY_F3)
        torusParam += torusStep;
    else if (key == GLUT_KEY_F4)
        torusParam -= torusStep;

    glutPostRedisplay();
}


void drawAxis() {
    // red OX
    glColor3f(1.f, 0.f, 0.f);
    glBegin(GL_LINES);
    glVertex3f(0.f, 0.f, 0.f);
    glVertex3f(1.f, 0.f, 0.f);
    glEnd();

    // green OY
    glColor3f(0.f, 1.f, 0.f);
    glBegin(GL_LINES);
    glVertex3f(0.f, 0.f, 0.f);
    glVertex3f(0.f, 1.f, 0.f);
    glEnd();

    // blue OZ
    glColor3f(0.f, 0.f, 1.f);
    glBegin(GL_LINES);
    glVertex3f(0.f, 0.f, 0.f);
    glVertex3f(0.f, 0.f, 1.f);
    glEnd();
}

